"use client"

import { useState } from "react"
import { Button } from "@/app/components/ui/button"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/app/components/ui/card"
import { Badge } from "@/app/components/ui/badge"
import { Progress } from "@/app/components/ui/progress"
import { RadioGroup, RadioGroupItem } from "@/app/components/ui/radio-group"
import { Label } from "@/app/components/ui/label"
import { Brain, Trophy, Clock, CheckCircle, XCircle, BarChart3, Link } from "lucide-react"

// –ü–ò–¢–ê–ù–ù–Ø –ó –§–ê–ô–õ–£
import { demoTestQuestions } from "@/lib/demo-data"

const testCategories = [
  {
    id: 1,
    title: "–û—Å–Ω–æ–≤–Ω—ñ —Å—Ç—Ä–∞–≤–∏",
    description: "–¢–µ—Å—Ç –Ω–∞ –∑–Ω–∞–Ω–Ω—è –æ—Å–Ω–æ–≤–Ω–∏—Ö —Å—Ç—Ä–∞–≤ —Ç–∞ —ó—Ö —Å–∫–ª–∞–¥—É",
    questions: 15,
    duration: "8 —Ö–≤",
    difficulty: "–°–∫–ª–∞–¥–Ω–∏–π",
    lastScore: 85,
    attempts: 3,
  },
  {
    id: 2,
    title: "–ú–∞–Ω–≥–∞–ª —Ç–∞ –≥—Ä–∏–ª—å",
    description: "–ó–Ω–∞–Ω–Ω—è —Å—Ç—Ä–∞–≤ –∑ –º–∞–Ω–≥–∞–ª—É —Ç–∞ —Å–ø–æ—Å–æ–±—ñ–≤ –ø—Ä–∏–≥–æ—Ç—É–≤–∞–Ω–Ω—è",
    questions: 12,
    duration: "6 —Ö–≤",
    difficulty: "–°–µ—Ä–µ–¥–Ω—ñ–π",
    lastScore: 78,
    attempts: 2,
  },
  {
    id: 3,
    title: "–•—ñ–Ω–∫–∞–ª—ñ —Ç–∞ —Ö–∞—á–∞–ø—É—Ä—ñ",
    description: "–¢—Ä–∞–¥–∏—Ü—ñ–π–Ω—ñ –≥—Ä—É–∑–∏–Ω—Å—å–∫—ñ —Å—Ç—Ä–∞–≤–∏ —Ç–∞ —ó—Ö –æ—Å–æ–±–ª–∏–≤–æ—Å—Ç—ñ",
    questions: 18,
    duration: "9 —Ö–≤",
    difficulty: "–°–µ—Ä–µ–¥–Ω—ñ–π",
    lastScore: 90,
    attempts: 4,
  },
  {
    id: 4,
    title: "–°–∞–ª–∞—Ç–∏ —Ç–∞ –∑–∞–∫—É—Å–∫–∏",
    description: "–•–æ–ª–æ–¥–Ω—ñ —Å—Ç—Ä–∞–≤–∏, —Å–∞–ª–∞—Ç–∏ —Ç–∞ –∑–∞–∫—É—Å–∫–∏",
    questions: 10,
    duration: "5 —Ö–≤",
    difficulty: "–õ–µ–≥–∫–∏–π",
    lastScore: 82,
    attempts: 3,
  },
  {
    id: 5,
    title: "–ê–ª–µ—Ä–≥–µ–Ω–∏ —Ç–∞ –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è",
    description: "–í–∞–∂–ª–∏–≤–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –∞–ª–µ—Ä–≥–µ–Ω–∏ –≤ —Å—Ç—Ä–∞–≤–∞—Ö",
    questions: 20,
    duration: "10 —Ö–≤",
    difficulty: "–°–µ—Ä–µ–¥–Ω—ñ–π",
    lastScore: null,
    attempts: 0,
  },
    {
    id: 6,
    title: "–ü–µ—Ä—à—ñ —Å—Ç—Ä–∞–≤–∏",
    description: "–ó–Ω–∞–Ω–Ω—è –ø–µ—Ä—à–∏—Ö —Å—Ç—Ä–∞–≤ —Ç–∞ —ó—Ö –ø—Ä–∏–≥–æ—Ç—É–≤–∞–Ω–Ω—è",
    questions: 12,
    duration: "6 —Ö–≤",
    difficulty: "–°–µ—Ä–µ–¥–Ω—ñ–π",
    lastScore: null,
    attempts: 1,
  },
]

const sampleQuestions = demoTestQuestions

export default function TestsPage() {
  const [currentTest, setCurrentTest] = useState<any>(null)
  const [currentQuestion, setCurrentQuestion] = useState(0)
  const [answers, setAnswers] = useState<number[]>([])
  const [selectedAnswer, setSelectedAnswer] = useState<number | null>(null)
  const [showResults, setShowResults] = useState(false)

  const getDifficultyColor = (difficulty: string) => {
    switch (difficulty) {
      case "–õ–µ–≥–∫–∏–π":
        return "bg-green-100 text-green-800"
      case "–°–µ—Ä–µ–¥–Ω—ñ–π":
        return "bg-yellow-100 text-yellow-800"
      case "–°–∫–ª–∞–¥–Ω–∏–π":
        return "bg-red-100 text-red-800"
      default:
        return "bg-gray-100 text-gray-800"
    }
  }

  const getScoreColor = (score: number | null) => {
    if (score === null) return "text-gray-400"
    if (score >= 80) return "text-green-600"
    if (score >= 60) return "text-yellow-600"
    return "text-red-600"
  }

  const startTest = (test: any) => {
    setCurrentTest(test)
    setCurrentQuestion(0)
    setAnswers([])
    setSelectedAnswer(null)
    setShowResults(false)
  }

  const nextQuestion = () => {
    if (selectedAnswer !== null) {
      const newAnswers = [...answers, selectedAnswer]
      setAnswers(newAnswers)

      if (currentQuestion < sampleQuestions.length - 1) {
        setCurrentQuestion(currentQuestion + 1)
        setSelectedAnswer(null)
      } else {
        setShowResults(true)
      }
    }
  }

  const calculateScore = () => {
    let correct = 0
    answers.forEach((answer, index) => {
      if (answer === sampleQuestions[index].correct) {
        correct++
      }
    })
    return Math.round((correct / sampleQuestions.length) * 100)
  }


  if (currentTest && !showResults) {
    const question = sampleQuestions[currentQuestion]
    const progress = ((currentQuestion + 1) / sampleQuestions.length) * 100

    return (
      <div className="container mx-auto px-4 py-8 max-w-2xl">
        <div className="mb-6">
          <div className="flex items-center justify-between mb-4">
            <h1 className="text-2xl font-bold">{currentTest.title}</h1>
            <Badge className="bg-orange-100 text-orange-800">
              {currentQuestion + 1} –∑ {sampleQuestions.length}
            </Badge>
          </div>
          <Progress value={progress} className="mb-4" />
        </div>

        <Card>
          <CardHeader>
            <CardTitle className="text-xl">{question.question}</CardTitle>
          </CardHeader>
          <CardContent>
            <RadioGroup
              value={selectedAnswer?.toString()}
              onValueChange={(value) => setSelectedAnswer(Number.parseInt(value))}
            >
              {question.options.map((option, index) => (
                <div key={index} className="flex items-center space-x-2 p-3 rounded-lg hover:bg-gray-50">
                  <RadioGroupItem value={index.toString()} id={`option-${index}`} />
                  <Label htmlFor={`option-${index}`} className="flex-1 cursor-pointer">
                    {option}
                  </Label>
                </div>
              ))}
            </RadioGroup>

            <div className="flex justify-between mt-6">
              <Button variant="outline" onClick={() => setCurrentTest(null)}>
                –°–∫–∞—Å—É–≤–∞—Ç–∏ —Ç–µ—Å—Ç
              </Button>
              <Button
                onClick={nextQuestion}
                disabled={selectedAnswer === null}
                className="bg-orange-500 hover:bg-orange-600"
              >
                {currentQuestion < sampleQuestions.length - 1 ? "–ù–∞—Å—Ç—É–ø–Ω–µ –ø–∏—Ç–∞–Ω–Ω—è" : "–ó–∞–≤–µ—Ä—à–∏—Ç–∏ —Ç–µ—Å—Ç"}
              </Button>
            </div>
          </CardContent>
        </Card>
      </div>
    )
  }

  if (showResults) {
    const score = calculateScore()

    return (
      <div className="container mx-auto px-4 py-8 max-w-2xl">
        <Card>
          <CardHeader className="text-center">
            <div className="mx-auto mb-4">
              {score >= 80 ? (
                <Trophy className="h-16 w-16 text-yellow-500" />
              ) : score >= 60 ? (
                <CheckCircle className="h-16 w-16 text-green-500" />
              ) : (
                <XCircle className="h-16 w-16 text-red-500" />
              )}
            </div>
            <CardTitle className="text-2xl">–†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç—É</CardTitle>
            <CardDescription>–í–∏ –∑–∞–≤–µ—Ä—à–∏–ª–∏ —Ç–µ—Å—Ç "{currentTest.title}"</CardDescription>
          </CardHeader>
          <CardContent>
            <div className="text-4xl font-bold mb-4 text-orange-600 text-center">{score}%</div>
            <div className="text-lg mb-6 text-center">
              –ü—Ä–∞–≤–∏–ª—å–Ω–∏—Ö –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π:{" "}
              {answers.filter((answer, index) => answer === sampleQuestions[index].correct).length} –∑{" "}
              {sampleQuestions.length}
            </div>

            <div className="space-y-2 mb-6 text-center">
              {score >= 80 && <p className="text-green-600">–í—ñ–¥–º—ñ–Ω–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç! üéâ</p>}
              {score >= 60 && score < 80 && <p className="text-yellow-600">–•–æ—Ä–æ—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç! –Ñ –Ω–∞–¥ —á–∏–º –ø—Ä–∞—Ü—é–≤–∞—Ç–∏.</p>}
              {score < 60 && <p className="text-red-600">–†–µ–∫–æ–º–µ–Ω–¥—É—î–º–æ –ø–æ–≤—Ç–æ—Ä–∏—Ç–∏ –Ω–∞–≤—á–∞–ª—å–Ω—ñ –º–∞—Ç–µ—Ä—ñ–∞–ª–∏.</p>}
            </div>

            <div className="mt-8 mb-6">
              <h3 className="text-lg font-medium mb-4">–û–≥–ª—è–¥ –ø–∏—Ç–∞–Ω—å:</h3>
              <div className="space-y-6">
                {sampleQuestions.map((question, index) => {
                  const isCorrect = answers[index] === question.correct
                  return (
                    <div
                      key={index}
                      className={`p-4 rounded-lg ${isCorrect ? "bg-green-50 border border-green-200" : "bg-red-50 border border-red-200"}`}
                    >
                      <div className="flex items-start gap-2">
                        {isCorrect ? (
                          <CheckCircle className="h-5 w-5 text-green-500 mt-0.5" />
                        ) : (
                          <XCircle className="h-5 w-5 text-red-500 mt-0.5" />
                        )}
                        <div>
                          <p className="font-medium mb-2">
                            {index + 1}. {question.question}
                          </p>
                          <div className="space-y-1 ml-2">
                            {question.options.map((option, optIndex) => (
                              <div
                                key={optIndex}
                                className={`text-sm ${
                                  optIndex === question.correct
                                    ? "text-green-700 font-medium"
                                    : optIndex === answers[index] && optIndex !== question.correct
                                      ? "text-red-700 font-medium"
                                      : "text-gray-600"
                                }`}
                              >
                                {optIndex === question.correct && <CheckCircle className="inline h-3 w-3 mr-1" />}
                                {optIndex === answers[index] && optIndex !== question.correct && (
                                  <XCircle className="inline h-3 w-3 mr-1" />
                                )}
                                {option}
                              </div>
                            ))}
                          </div>
                        </div>
                      </div>
                    </div>
                  )
                })}
              </div>
            </div>

            <div className="flex gap-4 justify-center">
              <Button variant="outline" onClick={() => setCurrentTest(null)}>
                –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ —Ç–µ—Å—Ç—ñ–≤
              </Button>


                                                    <Link href="/tests/trainee">
                                                      <Button size="lg" className="bg-blue-500 hover:bg-blue-600">
                                                        –ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –¥–ª—è —Å—Ç–∞–∂–µ—Ä–∞
                                                      </Button>
                                                    </Link>



              <Button onClick={() => startTest(currentTest)} className="bg-orange-500 hover:bg-orange-600">
                –ü—Ä–æ–π—Ç–∏ —â–µ —Ä–∞–∑
              </Button>
            </div>
          </CardContent>
        </Card>
      </div>
    )
  }

  return (
    <div className="container mx-auto px-4 py-8">
      <div className="mb-8">
        <h1 className="text-3xl font-bold text-gray-900 mb-2">–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∑–Ω–∞–Ω—å</h1>
        <p className="text-gray-600">–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ —Å–≤–æ—ó –∑–Ω–∞–Ω–Ω—è –º–µ–Ω—é —Ç–∞ –ø—Ä–æ—Ü–µ–¥—É—Ä —Ä–µ—Å—Ç–æ—Ä–∞–Ω—É</p>
      </div>

      {/* Stats Overview */}
      <div className="grid md:grid-cols-3 gap-6 mb-8">
        <Card className="border-orange-200">
          <CardHeader className="pb-3">
            <CardTitle className="text-lg flex items-center">
              <BarChart3 className="h-5 w-5 text-orange-500 mr-2" />
              –ó–∞–≥–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold text-orange-600 mb-1">78%</div>
            <div className="text-sm text-gray-600">–°–µ—Ä–µ–¥–Ω—ñ–π –±–∞–ª</div>
            <div className="mt-2 p-2 bg-yellow-50 rounded-md">
              <div className="text-xs text-yellow-800">
                <strong>FF:</strong> –ù–∞—Ä–∞–∑—ñ —Ü–µ –Ω–µ —Ñ—É–Ω–∫—Ü—ñ–æ–Ω—É—î —á–µ—Ä–µ–∑ –≤—ñ–¥—Å—É—Ç–Ω—ñ—Å—Ç—å —Ñ—ñ–Ω–∞–Ω—Å—É–≤–∞–Ω–Ω—è —Ç–∞ —Å–µ—Ä–≤–µ—Ä—É, —è–∫—â–æ –≤–∏ —Å–ø—Ä–∞–≤–¥—ñ
                –∑–∞—Ü—ñ–∫–∞–≤–ª–µ–Ω—ñ —É –∑–∞–ø—É—Å–∫—É —Ü—ñ—î—ó —Ñ—É–Ω–∫—Ü—ñ—ó, –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ —Ä–æ–∑—Ä–æ–±–Ω–∏–∫–∞ (+380960427745)
              </div>
            </div>
          </CardContent>
        </Card>

        <Card className="border-orange-200">
          <CardHeader className="pb-3">
            <CardTitle className="text-lg flex items-center">
              <Trophy className="h-5 w-5 text-orange-500 mr-2" />
              –ü—Ä–æ–π–¥–µ–Ω–æ —Ç–µ—Å—Ç—ñ–≤
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold text-orange-600 mb-1">9</div>
            <div className="text-sm text-gray-600">–ó 12 –¥–æ—Å—Ç—É–ø–Ω–∏—Ö</div>
            <div className="mt-2 p-2 bg-yellow-50 rounded-md">
              <div className="text-xs text-yellow-800">
                <strong>FF:</strong> –ù–∞—Ä–∞–∑—ñ —Ü–µ –Ω–µ —Ñ—É–Ω–∫—Ü—ñ–æ–Ω—É—î —á–µ—Ä–µ–∑ –≤—ñ–¥—Å—É—Ç–Ω—ñ—Å—Ç—å —Ñ—ñ–Ω–∞–Ω—Å—É–≤–∞–Ω–Ω—è —Ç–∞ —Å–µ—Ä–≤–µ—Ä—É, —è–∫—â–æ –≤–∏ —Å–ø—Ä–∞–≤–¥—ñ
                –∑–∞—Ü—ñ–∫–∞–≤–ª–µ–Ω—ñ —É –∑–∞–ø—É—Å–∫—É —Ü—ñ—î—ó —Ñ—É–Ω–∫—Ü—ñ—ó, –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ —Ä–æ–∑—Ä–æ–±–Ω–∏–∫–∞ (+380960427745)
              </div>
            </div>
          </CardContent>
        </Card>

        <Card className="border-orange-200">
          <CardHeader className="pb-3">
            <CardTitle className="text-lg flex items-center">
              <Clock className="h-5 w-5 text-orange-500 mr-2" />
              –ß–∞—Å –Ω–∞–≤—á–∞–Ω–Ω—è
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold text-orange-600 mb-1">2.5</div>
            <div className="text-sm text-gray-600">–ì–æ–¥–∏–Ω–∏ —Ü—å–æ–≥–æ —Ç–∏–∂–Ω—è</div>
            <div className="mt-2 p-2 bg-yellow-50 rounded-md">
              <div className="text-xs text-yellow-800">
                <strong>FF:</strong> –ù–∞—Ä–∞–∑—ñ —Ü–µ –Ω–µ —Ñ—É–Ω–∫—Ü—ñ–æ–Ω—É—î —á–µ—Ä–µ–∑ –≤—ñ–¥—Å—É—Ç–Ω—ñ—Å—Ç—å —Ñ—ñ–Ω–∞–Ω—Å—É–≤–∞–Ω–Ω—è —Ç–∞ —Å–µ—Ä–≤–µ—Ä—É, —è–∫—â–æ –≤–∏ —Å–ø—Ä–∞–≤–¥—ñ
                –∑–∞—Ü—ñ–∫–∞–≤–ª–µ–Ω—ñ —É –∑–∞–ø—É—Å–∫—É —Ü—ñ—î—ó —Ñ—É–Ω–∫—Ü—ñ—ó, –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ —Ä–æ–∑—Ä–æ–±–Ω–∏–∫–∞ (+380960427745)
              </div>
            </div>
          </CardContent>
        </Card>
      </div>

      <div className="grid md:grid-cols-2 gap-6">
        {testCategories.map((test) => (
          <Card key={test.id} className="hover:shadow-lg transition-shadow border-orange-100">
            <CardHeader>
              <div className="flex items-start justify-between">
                <div>
                  <CardTitle className="text-xl mb-2">{test.title}</CardTitle>
                  <CardDescription>{test.description}</CardDescription>
                </div>
                <Badge className={getDifficultyColor(test.difficulty)}>{test.difficulty}</Badge>
              </div>
            </CardHeader>
            <CardContent>
              <div className="grid grid-cols-2 gap-4 mb-4 text-sm text-gray-600">
                <div className="flex items-center">
                  <Brain className="h-4 w-4 mr-2" />
                  {test.questions} –ø–∏—Ç–∞–Ω—å
                </div>
                <div className="flex items-center">
                  <Clock className="h-4 w-4 mr-2" />
                  {test.duration}
                </div>
              </div>

              <div className="flex items-center justify-between mb-4">
                <div>
                  <div className="text-sm text-gray-600">–û—Å—Ç–∞–Ω–Ω—ñ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç:</div>
                  <div className={`text-lg font-semibold ${getScoreColor(test.lastScore)}`}>
                    {test.lastScore ? `${test.lastScore}%` : "–ù–µ –ø—Ä–æ–π–¥–µ–Ω–æ"}
                  </div>
                </div>
                <div className="text-right">
                  <div className="text-sm text-gray-600">–°–ø—Ä–æ–±:</div>
                  <div className="text-lg font-semibold">{test.attempts}</div>
                </div>
              </div>

              <Button className="w-full bg-orange-500 hover:bg-orange-600" onClick={() => startTest(test)}>
                {test.attempts > 0 ? "–ü—Ä–æ–π—Ç–∏ –∑–Ω–æ–≤—É" : "–†–æ–∑–ø–æ—á–∞—Ç–∏ —Ç–µ—Å—Ç"}
              </Button>
            </CardContent>
          </Card>
        ))}
      </div>
    </div>
  )
}
