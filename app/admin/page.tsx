‚Äúuse client‚Äù;

import React, { useState, useEffect, FormEvent } from ‚Äòreact‚Äô;
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from ‚Äú@/app/components/ui/card‚Äù;
import { Button } from ‚Äú@/app/components/ui/button‚Äù;
import { Input } from ‚Äú@/app/components/ui/input‚Äù;
import { Label } from ‚Äú@/app/components/ui/label‚Äù;
import { Badge } from ‚Äú@/app/components/ui/badge‚Äù;
import { Alert, AlertDescription } from ‚Äú@/app/components/ui/alert‚Äù;

import { useAuthStore, USER_ROLES } from ‚Äú@/app/store/authStore‚Äù;
import { Users, Calendar, Plus, Trash2, CheckCircle, AlertCircle, Shield, Lock } from ‚Äúlucide-react‚Äù;

export default function AdminPage() {
// –û—Ç—Ä–∏–º—É—î–º–æ –≤–µ—Å—å —Å—Ç–∞–Ω –∑ authStore
const authState = useAuthStore();

```
// –õ–æ–≥—É–≤–∞–Ω–Ω—è –¥–ª—è –¥–µ–±–∞–≥—É
useEffect(() => {
    console.log('üîç AdminPage - Auth State:', {
        isAuthenticated: authState.isAuthenticated,
        isCheckingAuth: authState.isCheckingAuth,
        user: authState.user,
        userRole: authState.user?.role
    });
}, [authState.isAuthenticated, authState.isCheckingAuth, authState.user]);

// –ü—Ä–∏–Ω—É–¥–æ–≤–æ –∑–∞–ø—É—Å–∫–∞—î–º–æ checkAuth –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
useEffect(() => {
    if (!authState.isAuthenticated && !authState.isCheckingAuth) {
        console.log('üöÄ Calling checkAuth...');
        authState.checkAuth();
    }
}, [authState]);

const [newCode, setNewCode] = useState('');
const [newDescription, setNewDescription] = useState('');
const [showAddForm, setShowAddForm] = useState(false);

// –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∫–æ–¥–∏ –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫—ñ–≤ —Ç—ñ–ª—å–∫–∏ –¥–ª—è –∞–¥–º—ñ–Ω—ñ–≤
useEffect(() => {
    if (authState.isAuthenticated && authState.user?.role === USER_ROLES.ADMIN) {
        authState.fetchEmployeeCodes();
    }
}, [authState.isAuthenticated, authState.user?.role]);

// –û—á–∏—â–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
useEffect(() => {
    if (authState.message) {
        const timer = setTimeout(() => {
            authState.clearMessage();
        }, 30000);
        return () => clearTimeout(timer);
    }
    if (authState.error) {
        const timer = setTimeout(() => {
            authState.clearError();
        }, 10000);
        return () => clearTimeout(timer);
    }
}, [authState.message, authState.error]);

// –ü–æ–∫–∞–∑—É—î–º–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
if (authState.isCheckingAuth) {
    return (
        <div className="min-h-screen bg-gray-50 flex items-center justify-center">
            <div className="text-center">
                <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto mb-4"></div>
                <p className="text-gray-600">–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∞–≤—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó...</p>
                <p className="text-xs text-gray-400 mt-2">
                    Debug: isCheckingAuth = {String(authState.isCheckingAuth)}
                </p>
            </div>
        </div>
    );
}

// –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∞–≤—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó
if (!authState.isAuthenticated || !authState.user) {
    return (
        <div className="min-h-screen bg-gray-50 flex items-center justify-center p-6">
            <div className="max-w-md w-full bg-white rounded-lg shadow p-6 text-center">
                <Lock className="w-12 h-12 text-gray-400 mx-auto mb-4" />
                <h2 className="text-xl font-bold mb-2">–ü–æ—Ç—Ä—ñ–±–Ω–∞ –∞–≤—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—è</h2>
                <p className="text-gray-600 mb-4">
                    –ë—É–¥—å –ª–∞—Å–∫–∞, —É–≤—ñ–π–¥—ñ—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É –¥–ª—è –¥–æ—Å—Ç—É–ø—É –¥–æ –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ.
                </p>
                <button 
                    onClick={() => window.location.href = '/login'}
                    className="px-4 py-2 bg-blue-600 text-white rounded-lg"
                >
                    –ü–µ—Ä–µ–π—Ç–∏ –¥–æ –≤—Ö–æ–¥—É
                </button>
                <p className="text-xs text-gray-400 mt-4">
                    Debug: auth = {String(authState.isAuthenticated)}, user = {authState.user ? 'exists' : 'null'}
                </p>
            </div>
        </div>
    );
}

// –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ä–æ–ª—ñ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
if (authState.user.role !== USER_ROLES.ADMIN) {
    return (
        <div className="min-h-screen bg-gray-50 flex items-center justify-center p-6">
            <div className="max-w-md w-full bg-white rounded-lg shadow p-6 text-center">
                <div className="w-16 h-16 mx-auto mb-4 bg-red-100 rounded-full flex items-center justify-center">
                    <Lock className="w-8 h-8 text-red-600" />
                </div>
                <h2 className="text-xl font-semibold text-gray-900 mb-2">–î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ</h2>
                <p className="text-gray-600 mb-2">
                    –¢—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∏ –º–∞—é—Ç—å –¥–æ—Å—Ç—É–ø –¥–æ —Ü—ñ—î—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏.
                </p>
                <p className="text-sm text-gray-500 mb-4">
                    –í–∞—à–∞ —Ä–æ–ª—å: <span className="font-medium">{authState.user.role}</span>
                </p>
                <button
                    onClick={() => window.history.back()}
                    className="w-full px-4 py-2 bg-gray-100 text-gray-700 rounded-lg hover:bg-gray-200 transition-colors"
                >
                    –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –Ω–∞–∑–∞–¥
                </button>
            </div>
        </div>
    );
}

// –û—Å–Ω–æ–≤–Ω–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –∞–¥–º—ñ–Ω—ñ–≤
const adminStats = [
    {
        title: "–ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∫–æ–¥—ñ–≤",
        value: Array.isArray(authState.employeeCodes) ? authState.employeeCodes.length : 0,
        change: "",
        icon: Users,
        color: "text-blue-600"
    },
    {
        title: "–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω—ñ –∫–æ–¥–∏",
        value: Array.isArray(authState.employeeCodes) ? authState.employeeCodes.filter((c: any) => c.isUsed).length : 0,
        change: "",
        icon: CheckCircle,
        color: "text-green-600"
    }
];

function formatDate(dateString: string): string {
    if (!dateString) return '';
    return new Date(dateString).toLocaleDateString('uk-UA', {
        day: '2-digit',
        month: '2-digit',
        year: 'numeric'
    });
}

async function handleAddCode(event: FormEvent<HTMLFormElement>) {
    event.preventDefault();
    if (!newCode.trim()) return;
    try {
        await authState.addEmployeeCode(newCode.trim(), newDescription.trim());
        setNewCode('');
        setNewDescription('');
        setShowAddForm(false);
    } catch (error) {
        console.error('Error adding code:', error);
    }
}

async function handleDeleteCode(codeId: string) {
    if (!window.confirm('–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ —Ü–µ–π –∫–æ–¥?')) return;
    try {
        await authState.deleteEmployeeCode(codeId);
    } catch (error) {
        console.error('Error deleting code:', error);
    }
}

return (
    <div className="min-h-screen bg-gray-50 p-6">
        <div className="max-w-7xl mx-auto space-y-6">
            {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∑ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–º —Ä–æ–ª—ñ */}
            <div className="flex justify-between items-center">
                <div>
                    <div className="flex items-center gap-2 mb-2">
                        <h1 className="text-3xl font-bold text-gray-900">–ü–∞–Ω–µ–ª—å –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞</h1>
                        <Badge variant="default" className="bg-green-100 text-green-800">
                            <Shield className="w-3 h-3 mr-1" />
                            {authState.user.role.toUpperCase()}
                        </Badge>
                    </div>
                    <p className="text-gray-600">–£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∫–æ–¥–∞–º–∏ –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫—ñ–≤</p>
                </div>
                <Button 
                    onClick={() => setShowAddForm(!showAddForm)}
                    className="flex items-center gap-2"
                >
                    <Plus className="h-4 w-4" />
                    –î–æ–¥–∞—Ç–∏ –∫–æ–¥
                </Button>
            </div>

            {/* –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è */}
            {authState.message && (
                <Alert className="border-green-200 bg-green-50">
                    <CheckCircle className="h-4 w-4 text-green-600" />
                    <AlertDescription className="text-green-700">
                        {authState.message}
                    </AlertDescription>
                </Alert>
            )}

            {authState.error && (
                <Alert className="border-red-200 bg-red-50">
                    <AlertCircle className="h-4 w-4 text-red-600" />
                    <AlertDescription className="text-red-700">
                        {authState.error}
                    </AlertDescription>
                </Alert>
            )}

            {/* Debug info (–º–æ–∂–Ω–∞ –ø—Ä–∏–±—Ä–∞—Ç–∏ –ø—ñ—Å–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è) */}
            <div className="bg-gray-100 p-2 rounded text-xs">
                Debug: User = {authState.user.email}, Role = {authState.user.role}, Codes = {authState.employeeCodes?.length || 0}
            </div>

            {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                {adminStats.map((stat, index) => {
                    const Icon = stat.icon;
                    return (
                        <Card key={index}>
                            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
                                <CardTitle className="text-sm font-medium text-gray-600">
                                    {stat.title}
                                </CardTitle>
                                <Icon className={`h-4 w-4 ${stat.color}`} />
                            </CardHeader>
                            <CardContent>
                                <div className="text-2xl font-bold">{stat.value}</div>
                                <p className="text-xs text-gray-600 mt-1">{stat.change}</p>
                            </CardContent>
                        </Card>
                    );
                })}
            </div>

            {/* –§–æ—Ä–º–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∫–æ–¥—É */}
            {showAddForm && (
                <Card>
                    <CardHeader>
                        <CardTitle>–î–æ–¥–∞—Ç–∏ –Ω–æ–≤–∏–π –∫–æ–¥ –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫–∞</CardTitle>
                    </CardHeader>
                    <CardContent>
                        <form onSubmit={handleAddCode} className="space-y-4">
                            <div>
                                <Label htmlFor="code">–ö–æ–¥ –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫–∞ *</Label>
                                <Input
                                    id="code"
                                    value={newCode}
                                    onChange={(e) => setNewCode(e.target.value)}
                                    placeholder="–í–≤–µ–¥—ñ—Ç—å —É–Ω—ñ–∫–∞–ª—å–Ω–∏–π –∫–æ–¥"
                                    required
                                />
                            </div>
                            <div>
                                <Label htmlFor="description">–û–ø–∏—Å (–Ω–µ–æ–±–æ–≤'—è–∑–∫–æ–≤–æ)</Label>
                                <Input
                                    id="description"
                                    value={newDescription}
                                    onChange={(e) => setNewDescription(e.target.value)}
                                    placeholder="–û–ø–∏—Å –∞–±–æ –∫–æ–º–µ–Ω—Ç–∞—Ä"
                                />
                            </div>
                            <div className="flex gap-2">
                                <Button 
                                    type="submit" 
                                    disabled={authState.isLoading || !newCode.trim()}
                                >
                                    {authState.isLoading ? '–î–æ–¥–∞–≤–∞–Ω–Ω—è...' : '–î–æ–¥–∞—Ç–∏ –∫–æ–¥'}
                                </Button>
                                <Button 
                                    type="button" 
                                    variant="outline" 
                                    onClick={() => setShowAddForm(false)}
                                >
                                    –°–∫–∞—Å—É–≤–∞—Ç–∏
                                </Button>
                            </div>
                        </form>
                    </CardContent>
                </Card>
            )}

            {/* –°–ø–∏—Å–æ–∫ –∫–æ–¥—ñ–≤ */}
            <Card>
                <CardHeader>
                    <CardTitle>–ö–æ–¥–∏ –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫—ñ–≤</CardTitle>
                    <CardDescription>
                        –£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∫–æ–¥–∞–º–∏ –¥–ª—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó –Ω–æ–≤–∏—Ö –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫—ñ–≤
                    </CardDescription>
                </CardHeader>
                <CardContent>
                    {authState.isLoading && !authState.employeeCodes?.length ? (
                        <div className="text-center py-4">–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è...</div>
                    ) : !authState.employeeCodes?.length ? (
                        <div className="text-center py-8 text-gray-500">
                            <Users className="h-12 w-12 mx-auto mb-4 text-gray-300" />
                            <p>–ö–æ–¥–∏ –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫—ñ–≤ —â–µ –Ω–µ –¥–æ–¥–∞–Ω—ñ</p>
                        </div>
                    ) : (
                        <div className="space-y-3">
                            {authState.employeeCodes.map((code: any) => (
                                <div 
                                    key={code._id} 
                                    className="flex items-center justify-between p-4 border rounded-lg hover:bg-gray-50"
                                >
                                    <div className="flex-1">
                                        <div className="flex items-center gap-3 mb-2">
                                            <span className="font-mono font-medium">
                                                {code.code}
                                            </span>
                                            <Badge variant={code.isUsed ? "secondary" : "default"}>
                                                {code.isUsed ? "–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–∏–π" : "–î–æ—Å—Ç—É–ø–Ω–∏–π"}
                                            </Badge>
                                        </div>
                                        {code.description && (
                                            <p className="text-sm text-gray-600 mb-2">
                                                {code.description}
                                            </p>
                                        )}
                                        <div className="text-xs text-gray-500 flex flex-wrap gap-4">
                                            <span className="flex items-center gap-1">
                                                <Calendar className="h-3 w-3" />
                                                –°—Ç–≤–æ—Ä–µ–Ω–æ: {formatDate(code.createdAt)}
                                            </span>
                                            {code.isUsed && code.usedBy && (
                                                <span>
                                                    {code.usedBy.firstName ? `–í–∏–∫–æ—Ä–∏—Å—Ç–∞–≤: ${code.usedBy.firstName} ${code.usedBy.lastName}` : `–í–∏–∫–æ—Ä–∏—Å—Ç–∞–≤: ${code.usedBy}`}
                                                </span>
                                            )}
                                            {code.isUsed && code.usedAt && (
                                                <span className="flex items-center gap-1">
                                                    <CheckCircle className="h-3 w-3" />
                                                    –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–æ: {formatDate(code.usedAt)}
                                                </span>
                                            )}
                                        </div>
                                    </div>
                                    {!code.isUsed && (
                                        <Button
                                            variant="ghost"
                                            size="icon"
                                            onClick={() => handleDeleteCode(code._id)}
                                            className="text-red-600 hover:text-red-800 hover:bg-red-50"
                                            title="–í–∏–¥–∞–ª–∏—Ç–∏ –∫–æ–¥"
                                        >
                                            <Trash2 className="h-4 w-4" />
                                        </Button>
                                    )}
                                </div>
                            ))}
                        </div>
                    )}
                </CardContent>
            </Card>
        </div>
    </div>
);
```
}